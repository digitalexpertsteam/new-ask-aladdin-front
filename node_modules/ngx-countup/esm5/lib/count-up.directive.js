import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, HostListener, EventEmitter, OnChanges, SimpleChanges, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
var CountUpDirective = /** @class */ (function () {
    function CountUpDirective(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    CountUpDirective.prototype.onClick = function () {
        if (this.reanimateOnClick) {
            this.animate();
        }
    };
    CountUpDirective.prototype.ngOnChanges = function (changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (changes.endVal && changes.endVal.currentValue !== undefined) {
            if (this.previousEndVal !== undefined) {
                this.options = tslib_1.__assign({}, this.options, { startVal: this.previousEndVal });
            }
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            this.animate();
            this.previousEndVal = this.endVal;
        }
    };
    CountUpDirective.prototype.animate = function () {
        var _this = this;
        this.zone.runOutsideAngular(function () {
            _this.countUp.reset();
            _this.countUp.start(function () {
                _this.zone.run(function () {
                    _this.complete.emit();
                });
            });
        });
    };
    CountUpDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    tslib_1.__decorate([
        Input('countUp')
    ], CountUpDirective.prototype, "endVal", void 0);
    tslib_1.__decorate([
        Input()
    ], CountUpDirective.prototype, "options", void 0);
    tslib_1.__decorate([
        Input()
    ], CountUpDirective.prototype, "reanimateOnClick", void 0);
    tslib_1.__decorate([
        Output()
    ], CountUpDirective.prototype, "complete", void 0);
    tslib_1.__decorate([
        HostListener('click')
    ], CountUpDirective.prototype, "onClick", null);
    CountUpDirective = tslib_1.__decorate([ tslib_1.__param(2, Inject(PLATFORM_ID))
    ], CountUpDirective);
CountUpDirective.ɵfac = function CountUpDirective_Factory(t) { return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
CountUpDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CountUpDirective, selectors: [["", "countUp", ""]], hostBindings: function CountUpDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CountUpDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { options: "options", reanimateOnClick: "reanimateOnClick", endVal: ["countUp", "endVal"] }, outputs: { complete: "complete" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{
        type: Directive,
        args: [{
                selector: '[countUp]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { options: [{
            type: Input
        }], reanimateOnClick: [{
            type: Input
        }], complete: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], endVal: [{
            type: Input,
            args: ['countUp']
        }] }); })();
    return CountUpDirective;
}());
export { CountUpDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtdXAuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZ3gtY291bnR1cC9saWIvY291bnQtdXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBQ1osU0FBUyxFQUNULGFBQWEsRUFDYixNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFDNUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBa0IsTUFBTSxZQUFZLENBQUM7QUFDckQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBS2xEO0FBQW9ELElBcUJsRCwwQkFDVSxFQUFjLEVBQ2QsSUFBWSxFQUNTLFVBQWtCO0FBQ2pELFFBSFUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLFFBQ2YsU0FBSSxHQUFKLElBQUksQ0FBUTtBQUFDLFFBQ1EsZUFBVSxHQUFWLFVBQVUsQ0FBUTtBQUFDLFFBZnpDLFlBQU8sR0FBbUIsRUFBRSxDQUFDO0FBQ3hDLFFBQVcscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0FBQ25DLFFBQVksYUFBUSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7QUFDaEQsSUFhSyxDQUFDO0FBQ04sSUFiRSxtQ0FBbUM7QUFDckMsSUFDRSxrQ0FBTyxHQUFQO0FBQ0EsUUFBRSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUMvQixZQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFNRSxzQ0FBVyxHQUFYLFVBQVksT0FBc0I7QUFDcEMsUUFBSSx3Q0FBd0M7QUFDNUMsUUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO0FBQzdDLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUFJLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7QUFDckUsWUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssU0FBUyxFQUFFO0FBQzdDLGdCQUFRLElBQUksQ0FBQyxPQUFPLHdCQUNQLElBQUksQ0FBQyxPQUFPLElBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxjQUFjLEdBQzlCLENBQUM7QUFDVixhQUFPO0FBQ1AsWUFBTSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25GLFlBQU0sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3JCLFlBQU0sSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3hDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFFSCxJQUFVLGtDQUFPLEdBQWY7QUFBYyxRQUFkLGlCQVNDO0FBQ0gsUUFUSSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0FBQzFCLFlBQUEsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUMzQixZQUFNLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ25CLGdCQUFFLEtBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ2hCLG9CQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDL0IsZ0JBQVEsQ0FBQyxDQUFDLENBQUM7QUFDWCxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNGO0FBQzJELGdCQWxDNUMsVUFBVTtBQUN4QixnQkFBZ0IsTUFBTTtBQUN0QixnQkFBMkMsTUFBTSx1QkFBOUMsTUFBTSxTQUFDLFdBQVc7QUFBUTtBQUFVLElBcEJyQjtBQUNmLFFBREYsS0FBSyxDQUFDLFNBQVMsQ0FBQztBQUFDLG9EQUFlO0FBQ2xDLElBSVU7QUFBcUIsUUFBN0IsS0FBSyxFQUFFO0FBQUMscURBQTZCO0FBQ3ZDLElBQVU7QUFBcUIsUUFBN0IsS0FBSyxFQUFFO0FBQUMsOERBQXdCO0FBQ2xDLElBQVc7QUFBcUIsUUFBOUIsTUFBTSxFQUFFO0FBQUMsc0RBQW9DO0FBRWhELElBRUU7QUFDTyxRQUZOLFlBQVksQ0FBQyxPQUFPLENBQUM7QUFDeEIsbURBSUc7QUFFSCxJQXJCYSxnQkFBZ0IsZ0NBSDVCLFNBQVMsQ0FBQyxjQUNULGpDQUVNLENBd0JILG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQTFCZCxFQUFFLFdBQVcsVUFDdEIsQ0FBQyx4QkF5QnVCLE9BeEJaLGdCQUFnQixDQXVENUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELHVCQUFDO0FBQ0EsQ0FEQSxBQXZERCxJQXVEQztBQUNELFNBeERhLGdCQUFnQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBIb3N0TGlzdGVuZXIsXG4gIEV2ZW50RW1pdHRlcixcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBOZ1pvbmUsIEluamVjdCwgUExBVEZPUk1fSURcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3VudFVwLCBDb3VudFVwT3B0aW9ucyB9IGZyb20gJ2NvdW50dXAuanMnO1xuaW1wb3J0IHtpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NvdW50VXBdJ1xufSlcbmV4cG9ydCBjbGFzcyBDb3VudFVwRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcblxuICBjb3VudFVwOiBDb3VudFVwO1xuICAvLyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gY291bnQgdG9cbiAgQElucHV0KCdjb3VudFVwJykgZW5kVmFsOiBudW1iZXI7XG4gIC8vIHByZXZpb3VzIGVuZCB2YWwgZW5hYmxlcyB1cyB0byBjb3VudCBmcm9tIGxhc3QgZW5kVmFsXG4gIC8vIHdoZW4gZW5kVmFsIGlzIGNoYW5nZWRcbiAgcHJldmlvdXNFbmRWYWw6IG51bWJlcjtcblxuICBASW5wdXQoKSBvcHRpb25zOiBDb3VudFVwT3B0aW9ucyA9IHt9O1xuICBASW5wdXQoKSByZWFuaW1hdGVPbkNsaWNrID0gdHJ1ZTtcbiAgQE91dHB1dCgpIGNvbXBsZXRlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIC8vIFJlLWFuaW1hdGUgaWYgcHJlZmVyZW5jZSBpcyBzZXQuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpIHtcbiAgICBpZiAodGhpcy5yZWFuaW1hdGVPbkNsaWNrKSB7XG4gICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgem9uZTogTmdab25lLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICApIHt9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIGRvbid0IGFuaW1hdGUgc2VydmVyLXNpZGUgKHVuaXZlcnNhbClcbiAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNoYW5nZXMuZW5kVmFsICYmIGNoYW5nZXMuZW5kVmFsLmN1cnJlbnRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5wcmV2aW91c0VuZFZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgc3RhcnRWYWw6IHRoaXMucHJldmlvdXNFbmRWYWxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY291bnRVcCA9IG5ldyBDb3VudFVwKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5lbmRWYWwsIHRoaXMub3B0aW9ucyk7XG4gICAgICB0aGlzLmFuaW1hdGUoKTtcbiAgICAgIHRoaXMucHJldmlvdXNFbmRWYWwgPSB0aGlzLmVuZFZhbDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFuaW1hdGUoKSB7XG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuY291bnRVcC5yZXNldCgpO1xuICAgICAgdGhpcy5jb3VudFVwLnN0YXJ0KCgpID0+IHtcbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZS5lbWl0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==