import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input, Output, HostListener, EventEmitter, OnChanges, SimpleChanges, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
let CountUpDirective = class CountUpDirective {
    constructor(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    onClick() {
        if (this.reanimateOnClick) {
            this.animate();
        }
    }
    ngOnChanges(changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        if (changes.endVal && changes.endVal.currentValue !== undefined) {
            if (this.previousEndVal !== undefined) {
                this.options = Object.assign({}, this.options, { startVal: this.previousEndVal });
            }
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            this.animate();
            this.previousEndVal = this.endVal;
        }
    }
    animate() {
        this.zone.runOutsideAngular(() => {
            this.countUp.reset();
            this.countUp.start(() => {
                this.zone.run(() => {
                    this.complete.emit();
                });
            });
        });
    }
};
CountUpDirective.ɵfac = function CountUpDirective_Factory(t) { return new (t || CountUpDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
CountUpDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CountUpDirective, selectors: [["", "countUp", ""]], hostBindings: function CountUpDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function CountUpDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { options: "options", reanimateOnClick: "reanimateOnClick", endVal: ["countUp", "endVal"] }, outputs: { complete: "complete" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
CountUpDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
tslib_1.__decorate([
    Input('countUp')
], CountUpDirective.prototype, "endVal", void 0);
tslib_1.__decorate([
    Input()
], CountUpDirective.prototype, "options", void 0);
tslib_1.__decorate([
    Input()
], CountUpDirective.prototype, "reanimateOnClick", void 0);
tslib_1.__decorate([
    Output()
], CountUpDirective.prototype, "complete", void 0);
tslib_1.__decorate([
    HostListener('click')
], CountUpDirective.prototype, "onClick", null);
CountUpDirective = tslib_1.__decorate([ tslib_1.__param(2, Inject(PLATFORM_ID))
], CountUpDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CountUpDirective, [{
        type: Directive,
        args: [{
                selector: '[countUp]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { options: [{
            type: Input
        }], reanimateOnClick: [{
            type: Input
        }], complete: [{
            type: Output
        }], 
    // Re-animate if preference is set.
    onClick: [{
            type: HostListener,
            args: ['click']
        }], endVal: [{
            type: Input,
            args: ['countUp']
        }] }); })();
export { CountUpDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtdXAuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZ3gtY291bnR1cC9saWIvY291bnQtdXAuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBQ1osU0FBUyxFQUNULGFBQWEsRUFDYixNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFDNUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBa0IsTUFBTSxZQUFZLENBQUM7QUFDckQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBS2xELElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0FBQUcsSUFxQjlCLFlBQ1UsRUFBYyxFQUNkLElBQVksRUFDUyxVQUFrQjtBQUNqRCxRQUhVLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUNmLFNBQUksR0FBSixJQUFJLENBQVE7QUFBQyxRQUNRLGVBQVUsR0FBVixVQUFVLENBQVE7QUFBQyxRQWZ6QyxZQUFPLEdBQW1CLEVBQUUsQ0FBQztBQUN4QyxRQUFXLHFCQUFnQixHQUFHLElBQUksQ0FBQztBQUNuQyxRQUFZLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0FBQ2hELElBYUssQ0FBQztBQUNOLElBYkUsbUNBQW1DO0FBQ3JDLElBQ0UsT0FBTztBQUNULFFBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDL0IsWUFBTSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBT0UsV0FBVyxDQUFDLE9BQXNCO0FBQ3BDLFFBQUksd0NBQXdDO0FBQzVDLFFBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUM3QyxZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEtBQUssU0FBUyxFQUFFO0FBQ3JFLFlBQU0sSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsRUFBRTtBQUM3QyxnQkFBUSxJQUFJLENBQUMsT0FBTyxxQkFDUCxJQUFJLENBQUMsT0FBTyxJQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsY0FBYyxHQUM5QixDQUFDO0FBQ1YsYUFBTztBQUNQLFlBQU0sSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNuRixZQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNyQixZQUFNLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN4QyxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDVSxPQUFPO0FBQ2pCLFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7QUFDckMsWUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzNCLFlBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO0FBQzlCLGdCQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtBQUMzQixvQkFBVSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQy9CLGdCQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ1gsWUFBTSxDQUFDLENBQUMsQ0FBQztBQUNULFFBQUksQ0FBQyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxDQUFDOzs7OzRMQUFBO0FBQ0Q7QUFBMEMsWUFsQzFCLFVBQVU7QUFDeEIsWUFBZ0IsTUFBTTtBQUN0QixZQUEyQyxNQUFNLHVCQUE5QyxNQUFNLFNBQUMsV0FBVztBQUFRO0FBcEJYO0FBQ2YsSUFERixLQUFLLENBQUMsU0FBUyxDQUFDO0FBQUMsZ0RBQWU7QUFLeEI7QUFBcUIsSUFBN0IsS0FBSyxFQUFFO0FBQUMsaURBQTZCO0FBQzdCO0FBQXFCLElBQTdCLEtBQUssRUFBRTtBQUFDLDBEQUF3QjtBQUN2QjtBQUFxQixJQUE5QixNQUFNLEVBQUU7QUFBQyxrREFBb0M7QUFJOUM7QUFDTyxJQUZOLFlBQVksQ0FBQyxPQUFPLENBQUM7QUFDeEIsK0NBSUc7QUFuQlUsZ0JBQWdCLDRCQUg1QixTQUFTLENBQUMsVUFDVCxRQUFRLEVBQUUsbkNBRVIsQ0F3QkMsbUJBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0tBMUJELE1BQ3RCLENBQUMsWkF5QnVCLEdBeEJaLGdCQUFnQixDQXVENUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUNEO0FBQUMsU0F4RFksZ0JBQWdCO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEhvc3RMaXN0ZW5lcixcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIE5nWm9uZSwgSW5qZWN0LCBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvdW50VXAsIENvdW50VXBPcHRpb25zIH0gZnJvbSAnY291bnR1cC5qcyc7XG5pbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY291bnRVcF0nXG59KVxuZXhwb3J0IGNsYXNzIENvdW50VXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIGNvdW50VXA6IENvdW50VXA7XG4gIC8vIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBjb3VudCB0b1xuICBASW5wdXQoJ2NvdW50VXAnKSBlbmRWYWw6IG51bWJlcjtcbiAgLy8gcHJldmlvdXMgZW5kIHZhbCBlbmFibGVzIHVzIHRvIGNvdW50IGZyb20gbGFzdCBlbmRWYWxcbiAgLy8gd2hlbiBlbmRWYWwgaXMgY2hhbmdlZFxuICBwcmV2aW91c0VuZFZhbDogbnVtYmVyO1xuXG4gIEBJbnB1dCgpIG9wdGlvbnM6IENvdW50VXBPcHRpb25zID0ge307XG4gIEBJbnB1dCgpIHJlYW5pbWF0ZU9uQ2xpY2sgPSB0cnVlO1xuICBAT3V0cHV0KCkgY29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPHZvaWQ+KCk7XG5cbiAgLy8gUmUtYW5pbWF0ZSBpZiBwcmVmZXJlbmNlIGlzIHNldC5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLnJlYW5pbWF0ZU9uQ2xpY2spIHtcbiAgICAgIHRoaXMuYW5pbWF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSB6b25lOiBOZ1pvbmUsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QsXG4gICkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgLy8gZG9uJ3QgYW5pbWF0ZSBzZXJ2ZXItc2lkZSAodW5pdmVyc2FsKVxuICAgIGlmICghaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5lbmRWYWwgJiYgY2hhbmdlcy5lbmRWYWwuY3VycmVudFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0aGlzLnByZXZpb3VzRW5kVmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICBzdGFydFZhbDogdGhpcy5wcmV2aW91c0VuZFZhbFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdGhpcy5jb3VudFVwID0gbmV3IENvdW50VXAodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmVuZFZhbCwgdGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuYW5pbWF0ZSgpO1xuICAgICAgdGhpcy5wcmV2aW91c0VuZFZhbCA9IHRoaXMuZW5kVmFsO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYW5pbWF0ZSgpIHtcbiAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5jb3VudFVwLnJlc2V0KCk7XG4gICAgICB0aGlzLmNvdW50VXAuc3RhcnQoKCkgPT4ge1xuICAgICAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlLmVtaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19