import { __decorate } from "tslib";
import { ElementRef, Injectable, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
let NgxGalleryService = class NgxGalleryService {
    constructor(renderer) {
        this.renderer = renderer;
        this.swipeHandlers = new Map();
    }
    manageSwipe(status, element, id, nextHandler, prevHandler) {
        const handlers = this.getSwipeHandlers(id);
        // swipeleft and swiperight are available only if hammerjs is included
        try {
            if (status && !handlers) {
                this.swipeHandlers.set(id, [
                    this.renderer.listen(element.nativeElement, 'swipeleft', () => nextHandler()),
                    this.renderer.listen(element.nativeElement, 'swiperight', () => prevHandler())
                ]);
            }
            else if (!status && handlers) {
                handlers.map((handler) => handler());
                this.removeSwipeHandlers(id);
            }
        }
        catch (e) {
        }
    }
    validateUrl(url) {
        if (url.replace) {
            return url.replace(new RegExp(' ', 'g'), '%20')
                .replace(new RegExp('\'', 'g'), '%27');
        }
        else {
            return url;
        }
    }
    getBackgroundUrl(image) {
        return 'url(\'' + this.validateUrl(image) + '\')';
    }
    getFileType(fileSource) {
        const fileExtension = fileSource.split('.').pop().toLowerCase();
        if (fileExtension === 'avi' || fileExtension === 'flv'
            || fileExtension === 'wmv' || fileExtension === 'mov'
            || fileExtension === 'mp4') {
            return 'video';
        }
        return 'image';
    }
    getSwipeHandlers(id) {
        return this.swipeHandlers.get(id);
    }
    removeSwipeHandlers(id) {
        this.swipeHandlers.delete(id);
    }
};
NgxGalleryService.ɵfac = function NgxGalleryService_Factory(t) { return new (t || NgxGalleryService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
NgxGalleryService.ctorParameters = () => [
    { type: Renderer2 }
];
NgxGalleryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxGalleryService_Factory() { return new NgxGalleryService(i0.ɵɵinject(i0.Renderer2)); }, token: NgxGalleryService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxGalleryService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, null); })();
export { NgxGalleryService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnkuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiQGtvbGtvdi9uZ3gtZ2FsbGVyeS9saWIvbmd4LWdhbGxlcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hFOztBQUlBLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0FBQzlCLElBRUUsWUFBb0IsUUFBbUI7QUFDekMsUUFEc0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBRmhDLGtCQUFhLEdBQWdDLElBQUksR0FBRyxFQUEwQixDQUFDO0FBQ3pGLElBRUUsQ0FBQztBQUNILElBQ0UsV0FBVyxDQUFDLE1BQWUsRUFBRSxPQUFtQixFQUFFLEVBQVUsRUFBRSxXQUF1QixFQUFFLFdBQXVCO0FBQUksUUFFaEgsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9DLFFBQ0ksc0VBQXNFO0FBQzFFLFFBQUksSUFBSTtBQUNSLFlBQU0sSUFBSSxNQUFNLElBQUksQ0FBQyxRQUFRLEVBQUU7QUFDL0IsZ0JBQVEsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO0FBQ25DLG9CQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZGLG9CQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3hGLGlCQUFTLENBQUMsQ0FBQztBQUNYLGFBQU87QUFBQyxpQkFBSyxJQUFJLENBQUMsTUFBTSxJQUFJLFFBQVEsRUFBRTtBQUN0QyxnQkFBUSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLGdCQUFRLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyQyxhQUFPO0FBQ1AsU0FBSztBQUFDLFFBQUEsT0FBTyxDQUFDLEVBQUU7QUFDaEIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVyxDQUFDLEdBQVc7QUFBSSxRQUN6QixJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7QUFDckIsWUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQztBQUNyRCxpQkFBUyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLFNBQUs7QUFBQyxhQUFLO0FBQ1gsWUFBTSxPQUFPLEdBQUcsQ0FBQztBQUNqQixTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0gsSUFDRSxnQkFBZ0IsQ0FBQyxLQUFhO0FBQ2hDLFFBQUksT0FBTyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7QUFDdEQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXLENBQUUsVUFBa0I7QUFBSSxRQUNqQyxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3BFLFFBQUksSUFBSSxhQUFhLEtBQUssS0FBSyxJQUFJLGFBQWEsS0FBSyxLQUFLO0FBQzFELGVBQVMsYUFBYSxLQUFLLEtBQUssSUFBSSxhQUFhLEtBQUssS0FBSztBQUMzRCxlQUFTLGFBQWEsS0FBSyxLQUFLLEVBQUU7QUFDbEMsWUFBTSxPQUFPLE9BQU8sQ0FBQztBQUNyQixTQUFLO0FBQ0wsUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixJQUFBLENBQUM7QUFDRCxJQUNVLGdCQUFnQixDQUFDLEVBQVU7QUFBSSxRQUNyQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RDLElBQUUsQ0FBQztBQUNILElBQ1UsbUJBQW1CLENBQUMsRUFBVTtBQUFJLFFBQ3hDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLElBQUUsQ0FBQztBQUNILENBQUM7MklBQUE7QUFDRDtBQUEyQyxZQXJEWCxTQUFTO0FBQUc7QUFDMUM7QUFKVyxpQkFBaUIsb0JBSDdCLFVBQVUsQ0FBQyxVQUNWLFVBQVUsRUFBRTtBQUFNLE1BQ25CLENBQUMsSUFDVztFQUFpQixDQXVEN0I7OzswRUFDRDtBQUFDLFNBeERZLGlCQUFpQjtBQUM3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0YWJsZSwgUmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4R2FsbGVyeVNlcnZpY2Uge1xuICBwcml2YXRlIHN3aXBlSGFuZGxlcnM6IE1hcDxzdHJpbmcsICgoKSA9PiB2b2lkKVtdPiA9IG5ldyBNYXA8c3RyaW5nLCAoKCkgPT4gdm9pZClbXT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgfVxuXG4gIG1hbmFnZVN3aXBlKHN0YXR1czogYm9vbGVhbiwgZWxlbWVudDogRWxlbWVudFJlZiwgaWQ6IHN0cmluZywgbmV4dEhhbmRsZXI6ICgpID0+IHZvaWQsIHByZXZIYW5kbGVyOiAoKSA9PiB2b2lkKTogdm9pZCB7XG5cbiAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuZ2V0U3dpcGVIYW5kbGVycyhpZCk7XG5cbiAgICAvLyBzd2lwZWxlZnQgYW5kIHN3aXBlcmlnaHQgYXJlIGF2YWlsYWJsZSBvbmx5IGlmIGhhbW1lcmpzIGlzIGluY2x1ZGVkXG4gICAgdHJ5IHtcbiAgICAgIGlmIChzdGF0dXMgJiYgIWhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMuc3dpcGVIYW5kbGVycy5zZXQoaWQsIFtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzd2lwZWxlZnQnLCAoKSA9PiBuZXh0SGFuZGxlcigpKSxcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3RlbihlbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICdzd2lwZXJpZ2h0JywgKCkgPT4gcHJldkhhbmRsZXIoKSlcbiAgICAgICAgXSk7XG4gICAgICB9IGVsc2UgaWYgKCFzdGF0dXMgJiYgaGFuZGxlcnMpIHtcbiAgICAgICAgaGFuZGxlcnMubWFwKChoYW5kbGVyKSA9PiBoYW5kbGVyKCkpO1xuICAgICAgICB0aGlzLnJlbW92ZVN3aXBlSGFuZGxlcnMoaWQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZVVybCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHVybC5yZXBsYWNlKSB7XG4gICAgICByZXR1cm4gdXJsLnJlcGxhY2UobmV3IFJlZ0V4cCgnICcsICdnJyksICclMjAnKVxuICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCdcXCcnLCAnZycpLCAnJTI3Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XG5cbiAgZ2V0QmFja2dyb3VuZFVybChpbWFnZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuICd1cmwoXFwnJyArIHRoaXMudmFsaWRhdGVVcmwoaW1hZ2UpICsgJ1xcJyknO1xuICB9XG5cbiAgZ2V0RmlsZVR5cGUgKGZpbGVTb3VyY2U6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZmlsZUV4dGVuc2lvbiA9IGZpbGVTb3VyY2Uuc3BsaXQoJy4nKS5wb3AoKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChmaWxlRXh0ZW5zaW9uID09PSAnYXZpJyB8fCBmaWxlRXh0ZW5zaW9uID09PSAnZmx2J1xuICAgICAgfHwgZmlsZUV4dGVuc2lvbiA9PT0gJ3dtdicgfHwgZmlsZUV4dGVuc2lvbiA9PT0gJ21vdidcbiAgICAgIHx8IGZpbGVFeHRlbnNpb24gPT09ICdtcDQnKSB7XG4gICAgICByZXR1cm4gJ3ZpZGVvJztcbiAgICB9XG4gICAgcmV0dXJuICdpbWFnZSc7XG59XG5cbiAgcHJpdmF0ZSBnZXRTd2lwZUhhbmRsZXJzKGlkOiBzdHJpbmcpOiAoKCkgPT4gdm9pZClbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuc3dpcGVIYW5kbGVycy5nZXQoaWQpO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVTd2lwZUhhbmRsZXJzKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnN3aXBlSGFuZGxlcnMuZGVsZXRlKGlkKTtcbiAgfVxufVxuIl19