var Carousel = /** @class */ (function () {
    function Carousel(properties) {
        var _this = this;
        this.initialPositionX = 0;
        this.newContainerPositionIndex = 0; // The index of the new position relative to the active index, for example -1 or +1
        this.preliminarySlideCounter = 0;
        this.slideCounter = 0; // Scrolling Index (counter)
        this.previousSlideCounter = 0;
        this.isContentImages = true;
        this.isLazyLoad = true;
        this.isContainerLocked = false;
        this.alignCells = "left";
        this.initialContainerPosition = 0;
        this.handleTouchstart = function (event) {
            _this.isTouchstart = true;
            if (_this.isSlideInProgress) {
                return;
            }
            var touches = event.touches;
            if (touches) {
                _this.startX = touches[0].clientX - _this.getCarouselElementPosition()['left'];
            }
            else {
                _this.startX = event.clientX - _this.getCarouselElementPosition()['left'];
            }
            _this.containerInitialPositionX = _this.getElementPosition()['left'] - _this.getCarouselElementPosition()['left'];
            _this.isMoveInProgress = true;
        };
        this.handleHorizontalSwipe = function (event) {
            if (_this.isSlideInProgress) {
                return;
            }
            var touches = event.touches;
            if (touches) {
                _this.moveX = touches[0].clientX - _this.getCarouselElementPosition()['left'];
            }
            else {
                _this.moveX = event.clientX - _this.getCarouselElementPosition()['left'];
            }
            _this.distanceAbs = _this.getDistanceAbs();
            _this.direction = _this.getDirection();
            _this.moveContainer();
        };
        this.handleTouchend = function (event) {
            if (_this.isSlideInProgress || !_this.isTouchstart) {
                _this.isTouchstart = false;
                return;
            }
            _this.isMoveInProgress = false;
            if (_this.detectSlide()) {
                _this.handleSlide();
            }
            else {
                _this.newContainerPositionIndex = 0;
                _this.alignContainer();
            }
            _this.startX = _this.moveX = _this.distanceAbs = undefined;
            _this.isTouchstart = false;
        };
        this.element = properties.element;
        this.properties = properties;
        this.cells = this.element.children;
        this.visibleWidth = this.properties.visibleWidth || this.element.parentElement.clientWidth;
        this.setContainerWidth();
        this.alignContainer(0);
    }
    Object.defineProperty(Carousel.prototype, "isFirstCell", {
        get: function () {
            return this.slideCounter === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "lastCellIndex", {
        get: function () {
            return this.images.length ? (this.images.length - 1) : (this.cells.length - 1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "overflowCellsLimit", {
        get: function () {
            return this.properties.overflowCellsLimit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "cellLimit", {
        get: function () {
            return this.visibleCellsCount + this.overflowCellsLimit * 2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "images", {
        get: function () {
            return this.properties.images;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "margin", {
        get: function () {
            return this.properties.margin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "minSwipeDistance", {
        get: function () {
            return this.properties.minSwipeDistance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "transitionDuration", {
        get: function () {
            return this.properties.transitionDuration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "transitionTimingFunction", {
        get: function () {
            return this.properties.transitionTimingFunction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "fullCellWidth", {
        get: function () {
            return this.properties.cellWidth + this.margin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "visibleCellsCount", {
        get: function () {
            return Math.ceil(this.visibleWidth / this.fullCellWidth);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "lapCounter", {
        get: function () {
            return Math.floor(this.slideCounter / this.totalContainerCellsCount);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "visibleCellsOverflowContainer", {
        get: function () {
            return (this.visibleCellsCount * this.fullCellWidth - this.margin) > this.visibleWidth;
        },
        enumerable: true,
        configurable: true
    });
    /* Move */
    Carousel.prototype.moveContainer = function () {
        var positionX = this.getMovePositionX();
        this.transformPositionX(positionX, 0);
    };
    Carousel.prototype.getMovePositionX = function () {
        var distance = this.getDistance();
        return this.containerInitialPositionX - distance;
    };
    /* Align */
    Carousel.prototype.alignContainer = function (duration) {
        if (duration === void 0) { duration = this.transitionDuration; }
        var positionX = this.getContainerPosition();
        this.transformPositionX(positionX, duration);
        this.setInitialContainerPosition(positionX);
    };
    Carousel.prototype.getContainerPosition = function () {
        var correction = this.getContainerPositionCorrection();
        this.isContainerPositionCorrection = correction != 0;
        return (this.initialContainerPosition + this.newContainerPositionIndex * this.fullCellWidth) + correction;
    };
    Carousel.prototype.setInitialContainerPosition = function (position) {
        var correction = this.getContainerPositionCorrection();
        this.initialContainerPosition = position - correction;
    };
    Carousel.prototype.getContainerPositionCorrection = function () {
        var correction = 0;
        if ((this.images.length - this.preliminarySlideCounter) < this.visibleCellsCount || this.isSlideLengthLimited) {
            if (this.visibleWidth < this.totalContainerCellsCount * this.fullCellWidth) {
                correction = -(this.visibleCellsCount * this.fullCellWidth - this.visibleWidth - this.margin);
            }
            if (correction >= -this.margin) {
                correction = 0;
            }
        }
        return correction;
    };
    /* Quickly center */
    Carousel.prototype.quicklyPositionContainer = function () {
        var correction = this.getContainerPositionCorrection();
        var initialPosition = this.getNewContainerPosition() + correction;
        this.transformPositionX(initialPosition, 0);
        this.setInitialContainerPosition(initialPosition);
    };
    Carousel.prototype.getNewContainerPosition = function () {
        if (this.slideCounter > this.overflowCellsLimit) {
            if (this.alignCells === "left") {
                this.lineUpCells();
                return -(this.overflowCellsLimit * this.fullCellWidth);
            }
        }
        if (this.slideCounter <= this.overflowCellsLimit) {
            if (this.previousSlideCounter > this.overflowCellsLimit) {
                this.lineUpCells();
            }
            return -(this.slideCounter * this.fullCellWidth);
        }
    };
    Carousel.prototype.setContainerWidth = function () {
        var containerWidth = this.getContainerWidth();
        this.element.style.width = containerWidth + "px";
    };
    Carousel.prototype.getContainerWidth = function () {
        this.totalContainerCellsCount = this.visibleCellsCount + this.overflowCellsLimit * 2;
        var containerWidth = this.totalContainerCellsCount * this.fullCellWidth;
        var totalImageWidth = this.images.length * this.fullCellWidth;
        if (totalImageWidth < containerWidth) {
            containerWidth = totalImageWidth;
        }
        return containerWidth;
    };
    Carousel.prototype.getFile = function (cellIndex) {
        var imageIndex = this.getFileIndex(cellIndex);
        var file = this.images[imageIndex];
        if (file && !file.type) {
            file.type = 'image';
        }
        return {
            image: this.images[imageIndex],
            imageIndex: imageIndex
        };
    };
    Carousel.prototype.getFileIndex = function (cellIndex) {
        var positionIndex = this.getPositionIndex(cellIndex);
        var numberLeftCells = (this.totalContainerCellsCount - 1) / 2;
        var imageIndex;
        if (!this.isContainerLocked) {
            if (this.slideCounter <= this.overflowCellsLimit) {
                return cellIndex;
            }
            else {
                var cellLimitOverflow = this.slideCounter - this.overflowCellsLimit;
                imageIndex = positionIndex + cellLimitOverflow;
                return imageIndex;
            }
        }
        if (this.alignCells === "left") {
            if (this.slideCounter > this.overflowCellsLimit) {
                var cellLimitOverflow = this.slideCounter - this.overflowCellsLimit;
                imageIndex = positionIndex + cellLimitOverflow;
            }
            else {
                imageIndex = cellIndex;
            }
        }
        if (imageIndex > this.lastCellIndex) {
            return false;
        }
        return imageIndex;
    };
    Carousel.prototype.transformPositionX = function (value, duration) {
        if (duration === void 0) { duration = this.transitionDuration; }
        this.element.style.transition = 'transform ' + duration + 'ms ' + this.transitionTimingFunction;
        this.element.style.transform = 'translateX(' + value + 'px)';
    };
    Carousel.prototype.detectSlide = function () {
        return this.distanceAbs >= this.minSwipeDistance;
    };
    Carousel.prototype.next = function () {
        if (this.isSlideInProgress) {
            return;
        }
        this.direction = 'left';
        this.handleSlide(1);
    };
    Carousel.prototype.prev = function () {
        if (this.isSlideInProgress) {
            return;
        }
        this.direction = 'right';
        this.handleSlide(1);
    };
    Carousel.prototype.select = function (index) {
        this.slideCounter = index;
        this.quicklyPositionContainer();
    };
    Carousel.prototype.handleSlide = function (slideLength) {
        if (slideLength === void 0) { slideLength = undefined; }
        this.slideLength = this.getSlideLength();
        this.slideLength = slideLength ? slideLength : this.limitSlideLength(this.slideLength);
        if (this.direction === 'left' && !this.isSlideInProgress) {
            this.preliminarySlideCounter = this.slideCounter + this.slideLength;
            if (!this.detectLastSlide(this.slideCounter + this.slideLength)) {
                this.newContainerPositionIndex = this.newContainerPositionIndex - this.slideLength;
                this.isSlideInProgress = true;
                if (this.isLazyLoad) {
                    this.isContainerLocked = this.preliminarySlideCounter > this.overflowCellsLimit;
                    if (this.detectContainerUnlock()) {
                        this.isContainerLocked = false;
                    }
                }
            }
        }
        if (this.direction === 'right' && !this.isSlideInProgress) {
            if (this.slideCounter - this.slideLength < 0) {
                this.slideLength = this.slideCounter;
            }
            this.preliminarySlideCounter = this.slideCounter - this.slideLength;
            if (!this.isFirstCell) {
                this.newContainerPositionIndex = this.newContainerPositionIndex + this.slideLength;
                this.isSlideInProgress = true;
                if (this.isLazyLoad) {
                    if (this.preliminarySlideCounter > this.overflowCellsLimit) {
                        this.isContainerLocked = true;
                    }
                    else {
                        this.isContainerLocked = false;
                    }
                    if (this.detectContainerUnlock()) {
                        this.isContainerLocked = false;
                    }
                }
            }
        }
        this.alignContainer();
    };
    Carousel.prototype.getSlideLength = function () {
        var correction = this.getContainerPositionCorrection();
        var length = Math.floor((this.distanceAbs + correction) / this.fullCellWidth);
        if (this.distanceAbs % this.fullCellWidth >= this.minSwipeDistance) {
            length++;
        }
        return length;
    };
    Carousel.prototype.limitSlideLength = function (slideLength) {
        if (slideLength > 1) {
            for (var i = 0; i < slideLength; i++) {
                var newSlideCounter = this.slideCounter + (slideLength - i);
                if (!this.detectLastSlide(newSlideCounter)) {
                    slideLength = slideLength - i;
                    this.isSlideLengthLimited = i > 0;
                    break;
                }
            }
        }
        return slideLength;
    };
    Carousel.prototype.detectLastSlide = function (slideCounter) {
        return (this.images.length - slideCounter) < this.visibleCellsCount;
    };
    Carousel.prototype.isNextArrowDisabled = function () {
        if (this.visibleCellsOverflowContainer) {
            return this.detectLastSlide(this.slideCounter + 1) && this.isContainerPositionCorrection;
        }
        else {
            return this.detectLastSlide(this.slideCounter + 1);
        }
    };
    Carousel.prototype.isPrevArrowDisabled = function () {
        return this.slideCounter === 0;
    };
    Carousel.prototype.detectContainerUnlock = function () {
        return (this.images.length - this.preliminarySlideCounter) < (this.visibleCellsCount + this.overflowCellsLimit);
    };
    Carousel.prototype.handleSlideEnd = function () {
        if (this.isSlideInProgress) {
            this.transformSlideEnd();
            this.isSlideInProgress = false;
            this.newContainerPositionIndex = 0;
            this.isSlideLengthLimited = undefined;
        }
    };
    Carousel.prototype.transformSlideEnd = function () {
        if (this.isLazyLoad) {
            this.setSlideCounter();
            this.quicklyPositionContainer();
        }
        this.previousSlideCounter = this.slideCounter;
    };
    Carousel.prototype.setSlideCounter = function () {
        if (this.direction === 'left') {
            this.slideCounter = this.slideCounter + this.slideLength;
        }
        if (this.direction === 'right') {
            this.slideCounter = this.slideCounter - this.slideLength;
        }
        this.direction = undefined;
        this.slideLength = 0;
    };
    Carousel.prototype.resetTransition = function () {
        this.element.style.transition = '';
    };
    Carousel.prototype.getElementPosition = function () {
        return this.element.getBoundingClientRect();
    };
    Carousel.prototype.getCarouselElementPosition = function () {
        return this.properties.container.getBoundingClientRect();
    };
    Carousel.prototype.getDistance = function () {
        return this.startX - this.moveX;
    };
    Carousel.prototype.getDistanceAbs = function () {
        return Math.abs(this.startX - this.moveX);
    };
    Carousel.prototype.getDirection = function () {
        var direction = Math.sign(this.startX - this.moveX);
        if (direction === -1) {
            return 'right';
        }
        if (direction === 1) {
            return 'left';
        }
    };
    Carousel.prototype.lineUpCells = function () {
        var cells = this.element.children;
        for (var i = 0; i < cells.length; i++) {
            var cell = cells[i];
            var positionX = this.getCellPositionX(i);
            cell.style.transform = 'translateX(' + positionX + 'px)';
        }
        ;
    };
    Carousel.prototype.getCellPositionX = function (index) {
        var positionIndex = this.getPositionIndex(index);
        return positionIndex * this.fullCellWidth;
    };
    Carousel.prototype.getPositionIndex = function (cellIndex) {
        var slideCounter = this.slideCounter - this.overflowCellsLimit;
        var positionIndex;
        if (slideCounter > this.totalContainerCellsCount) {
            slideCounter = slideCounter % this.totalContainerCellsCount;
        }
        if (slideCounter < 0) {
            return cellIndex;
        }
        else {
            positionIndex = cellIndex - slideCounter;
            if (positionIndex < 0) {
                positionIndex = this.totalContainerCellsCount + positionIndex;
            }
        }
        return positionIndex;
    };
    Object.defineProperty(Carousel.prototype, "containerOverflowRightCount", {
        get: function () {
            var totalOverflowCellsCount = this.images.length - this.totalContainerCellsCount;
            var overflowRight = 0;
            if (totalOverflowCellsCount > 0) {
                overflowRight = totalOverflowCellsCount - (this.previousSlideCounter - this.overflowCellsLimit);
                if (overflowRight > 0) {
                    return overflowRight;
                }
            }
            return overflowRight;
        },
        enumerable: true,
        configurable: true
    });
    Carousel.prototype.getCenterPositionIndex = function () {
        return (this.totalContainerCellsCount - 1) / 2;
    };
    return Carousel;
}());
export { Carousel };
//# sourceMappingURL=data:application/json;base64,