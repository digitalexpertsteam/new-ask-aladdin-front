import { __decorate } from "tslib";
import { Injectable, Injector, ComponentFactoryResolver, EmbeddedViewRef, ApplicationRef } from '@angular/core';
import { EventService } from './event.service';
import { OverlayContainerComponent } from './overlay-container.component';
import { defaultProperties } from './default-properties';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './event.service';
var Overlay = /** @class */ (function () {
    function Overlay(componentFactoryResolver, appRef, injector, eventService) {
        var _this = this;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.eventService = eventService;
        this.componentRefs = {};
        this._properties = {};
        this.globalEventsSubscription = this.eventService.emitter.subscribe(function (event) {
            _this.handleGlobalEvents(event);
        });
    }
    Overlay.prototype.appendComponentToBody = function (properties, component) {
        if (component === void 0) { component = OverlayContainerComponent; }
        //if (this.componentRefs[properties.id]){
        if (this.componentRefs[0]) {
            return;
        }
        var componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        //this.componentRefs[properties.id] = componentRef;
        this.componentRefs[0] = componentRef;
        componentRef.instance.properties = properties;
        this.appRef.attachView(componentRef.hostView);
        var domElem = componentRef.hostView.rootNodes[0];
        // Add to body
        document.body.appendChild(domElem);
    };
    /*
    appendComponentToTag(element: any, tagname: string = ''):void {
        if (tagname){
            document.getElementsByTagName(tagname)[0].appendChild(element);
        } else {
            document.body.appendChild(element);
        }
    }
    */
    Overlay.prototype.load = function (properties) {
        properties = this.applyPropertieDefaults(defaultProperties, properties);
        this.appendComponentToBody(properties);
    };
    Overlay.prototype.close = function (prop) {
        if (prop === void 0) { prop = {}; }
        /*
        if (this.componentRefs[prop.id]){
            (<ContainerProperties>this.componentRefs[prop.id].instance).closeOverlay();
        }
        */
    };
    Overlay.prototype.applyPropertieDefaults = function (defaultProperties, properties) {
        if (!properties) {
            properties = {};
        }
        if (!properties.index) {
            properties.index = 0;
        }
        this._defaultProperties = Object.assign({}, defaultProperties);
        return Object.assign(this._defaultProperties, properties);
    };
    Overlay.prototype.objectLength = function (obj) {
        var length = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key))
                length++;
        }
        return length;
    };
    ;
    Overlay.prototype.handleGlobalEvents = function (event) {
        if (event.type === '[Overlay] Hide') {
            this.handleCloseEvent();
        }
    };
    Overlay.prototype.handleCloseEvent = function () {
        //const id = 'popover'; // Note: pass id in event
        this.appRef.detachView(this.componentRefs[0].hostView);
        this.componentRefs[0].destroy();
        delete this.componentRefs[0];
    };
    Overlay.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector },
        { type: EventService }
    ]; };
Overlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc1.EventService)); };
Overlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: function (t) { return Overlay.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.Injector }, { type: ɵngcc1.EventService }]; }, null); })();
    return Overlay;
}());
export { Overlay };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,