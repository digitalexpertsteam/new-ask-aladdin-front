import { __decorate } from "tslib";
import { Component, OnInit, HostBinding, HostListener, ViewChild, ElementRef, Input, ComponentFactoryResolver } from '@angular/core';
import { EventService } from './event.service';
import { AdDirective } from './ad.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './event.service';
import * as ɵngcc2 from './ad.directive';

function OverlayContainerComponent_ng_template_0_Template(rf, ctx) { }
var OverlayContainerComponent = /** @class */ (function () {
    function OverlayContainerComponent(componentFactoryResolver, elementRef, eventService) {
        var _this = this;
        this.componentFactoryResolver = componentFactoryResolver;
        this.elementRef = elementRef;
        this.eventService = eventService;
        this.overlayBackdrop = true;
        this.minTimeout = 30;
        this._hostOpacity = 0;
        this.globalEventsSubscription = this.eventService.emitter.subscribe(function (event) {
            _this.handleGlobalEvents(event);
        });
    }
    Object.defineProperty(OverlayContainerComponent.prototype, "hostOpacity", {
        get: function () {
            return this.properties.fadeIn ? this._hostOpacity : 1;
        },
        set: function (value) {
            this._hostOpacity = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayContainerComponent.prototype, "hostTransition", {
        get: function () {
            var duration = this.properties.animationDuration + 'ms ';
            var esing = this.properties.animationTimingFunction;
            return 'opacity ' + duration + esing + ', transform ' + duration + esing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayContainerComponent.prototype, "hostZIndex", {
        get: function () {
            return this.properties.zIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayContainerComponent.prototype, "hostWidth", {
        get: function () {
            return this.properties.wrapperWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayContainerComponent.prototype, "hostHeight", {
        get: function () {
            return this.properties.wrapperHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OverlayContainerComponent.prototype, "hostPosition", {
        get: function () {
            return this.properties.position;
        },
        enumerable: true,
        configurable: true
    });
    OverlayContainerComponent.prototype.onClick = function (event) {
        if (!this.elementRef.nativeElement.contains(event.target)) {
            if (this.hostShown) {
                this.closeOverlay();
            }
        }
    };
    OverlayContainerComponent.prototype.transitionEnd = function (event) {
        if (event.target.tagName.toLowerCase() != "overlay") {
            return;
        }
        if (event.propertyName != "opacity") {
            return;
        }
        if (this.hostShown) {
            this.closeOverlayEnd();
            //this.stateEvents.emit("shown");
        }
        else {
            this.hostShown = true;
            //this.stateEvents.emit("hidden");
        }
    };
    Object.defineProperty(OverlayContainerComponent.prototype, "popoverClass", {
        get: function () {
            if (this.properties.metadata) {
                return this.properties.metadata.popoverClass;
            }
        },
        enumerable: true,
        configurable: true
    });
    OverlayContainerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.loadComponent();
        this.initialOverlay();
        setTimeout(function () {
            _this.isInitial = true;
        }, this.minTimeout); // Note: not good
    };
    OverlayContainerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.showOverlayAnimation();
        }, this.minTimeout);
    };
    OverlayContainerComponent.prototype.ngOnDestroy = function () {
        if (this.globalEventsSubscription) {
            this.globalEventsSubscription.unsubscribe();
        }
    };
    OverlayContainerComponent.prototype.initialOverlay = function () {
        this.hostTransform = 'translateY(' + this.properties.animationTranslateY + ')';
    };
    OverlayContainerComponent.prototype.showOverlayAnimation = function () {
        this.hostOpacity = 1;
        this.hostTransform = 'translateY(0px)';
    };
    OverlayContainerComponent.prototype.loadComponent = function () {
        var adItem = this.properties;
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.mainComponent);
        var viewContainerRef = this.adHost.viewContainerRef;
        viewContainerRef.clear();
        var componentRef = viewContainerRef.createComponent(componentFactory);
        var componentRefElement = componentRef.location.nativeElement;
        // Set styles
        componentRefElement.style.width = this.properties.width;
        componentRefElement.style.height = this.properties.height;
        // Set classes
        if (typeof this.popoverClass === 'string') {
            componentRefElement.classList.add(this.popoverClass);
        }
        if (typeof this.popoverClass === 'object') {
            this.popoverClass.forEach(function (className) {
                componentRefElement.classList.add(className);
            });
        }
        // Pass properties
        componentRef.instance.overlayProperties = this.properties;
    };
    OverlayContainerComponent.prototype.closeOverlay = function () {
        this.hostOpacity = 0;
        this.hostTransform = 'translateY(' + this.properties.animationTranslateY + ')';
    };
    OverlayContainerComponent.prototype.closeOverlayEnd = function () {
        this.hostShown = false;
        this.eventService.emitChangeEvent({
            type: '[Overlay] Hide'
        });
    };
    OverlayContainerComponent.prototype.handleGlobalEvents = function (event) {
        if (event.type === 'Hide') {
            this.closeOverlay();
        }
    };
    OverlayContainerComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: EventService }
    ]; };
    __decorate([
        ViewChild(AdDirective, { static: true })
    ], OverlayContainerComponent.prototype, "adHost", void 0);
    __decorate([
        Input()
    ], OverlayContainerComponent.prototype, "properties", void 0);
    __decorate([
        HostBinding('style.opacity')
    ], OverlayContainerComponent.prototype, "hostOpacity", null);
    __decorate([
        HostBinding('style.transition')
    ], OverlayContainerComponent.prototype, "hostTransition", null);
    __decorate([
        HostBinding('style.transform')
    ], OverlayContainerComponent.prototype, "hostTransform", void 0);
    __decorate([
        HostBinding('style.z-index')
    ], OverlayContainerComponent.prototype, "hostZIndex", null);
    __decorate([
        HostBinding('style.width')
    ], OverlayContainerComponent.prototype, "hostWidth", null);
    __decorate([
        HostBinding('style.height')
    ], OverlayContainerComponent.prototype, "hostHeight", null);
    __decorate([
        HostBinding('style.position')
    ], OverlayContainerComponent.prototype, "hostPosition", null);
    __decorate([
        HostBinding('class.overlay-shown')
    ], OverlayContainerComponent.prototype, "hostShown", void 0);
    __decorate([
        HostListener('document:click', ['$event'])
    ], OverlayContainerComponent.prototype, "onClick", null);
    __decorate([
        HostListener('transitionend', ['$event'])
    ], OverlayContainerComponent.prototype, "transitionEnd", null);
OverlayContainerComponent.ɵfac = function OverlayContainerComponent_Factory(t) { return new (t || OverlayContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.EventService)); };
OverlayContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: OverlayContainerComponent, selectors: [["overlay"]], viewQuery: function OverlayContainerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(AdDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.adHost = _t.first);
    } }, hostVars: 16, hostBindings: function OverlayContainerComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function OverlayContainerComponent_click_HostBindingHandler($event) { return ctx.onClick($event); }, false, ɵngcc0.ɵɵresolveDocument)("transitionend", function OverlayContainerComponent_transitionend_HostBindingHandler($event) { return ctx.transitionEnd($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("opacity", ctx.hostOpacity)("transition", ctx.hostTransition)("z-index", ctx.hostZIndex)("width", ctx.hostWidth)("height", ctx.hostHeight)("position", ctx.hostPosition)("transform", ctx.hostTransform);
        ɵngcc0.ɵɵclassProp("overlay-shown", ctx.hostShown);
    } }, inputs: { properties: "properties" }, decls: 1, vars: 0, consts: [["ad-host", ""]], template: function OverlayContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, OverlayContainerComponent_ng_template_0_Template, 0, 0, "ng-template", 0);
    } }, directives: [ɵngcc2.AdDirective], styles: ["[_nghost-%COMP%]{position:absolute;top:0;left:0}[_nghost-%COMP%]   .overlay-backdrop[_ngcontent-%COMP%]{position:fixed;top:0;left:0;right:0;bottom:0;background-color:#000;opacity:0;z-index:1000;pointer-events:auto}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainerComponent, [{
        type: Component,
        args: [{
                selector: 'overlay',
                template: "<!--\n<div class=\"overlay-backdrop\" \n\t*ngIf=\"properties.overlayBackdrop\" \n\t(click)=\"onBackdropClick()\" \n\t[ngClass]=\"properties.backdropClass\"></div>\n-->\n<!--\n<div class=\"overlay-container\"\n\t[ngStyle]=\"containerStyles\" \n\t[ngClass]=\"properties.overlayClass\">\n\n\t<ng-template ad-host></ng-template>\n</div>\n-->\n\n<ng-template ad-host></ng-template>",
                styles: [":host{position:absolute;top:0;left:0}:host .overlay-backdrop{position:fixed;top:0;left:0;right:0;bottom:0;background-color:#000;opacity:0;z-index:1000;pointer-events:auto}"]
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.EventService }]; }, { hostOpacity: [{
            type: HostBinding,
            args: ['style.opacity']
        }], hostTransition: [{
            type: HostBinding,
            args: ['style.transition']
        }], hostZIndex: [{
            type: HostBinding,
            args: ['style.z-index']
        }], hostWidth: [{
            type: HostBinding,
            args: ['style.width']
        }], hostHeight: [{
            type: HostBinding,
            args: ['style.height']
        }], hostPosition: [{
            type: HostBinding,
            args: ['style.position']
        }], onClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }], transitionEnd: [{
            type: HostListener,
            args: ['transitionend', ['$event']]
        }], hostShown: [{
            type: HostBinding,
            args: ['class.overlay-shown']
        }], hostTransform: [{
            type: HostBinding,
            args: ['style.transform']
        }], adHost: [{
            type: ViewChild,
            args: [AdDirective, { static: true }]
        }], properties: [{
            type: Input
        }] }); })();
    return OverlayContainerComponent;
}());
export { OverlayContainerComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,