var Touches = /** @class */ (function () {
    function Touches(properties) {
        var _this = this;
        this.eventType = undefined;
        this.handlers = {};
        this.startX = 0;
        this.startY = 0;
        this.lastTap = 0;
        this.doubleTapMinTimeout = 300;
        this.tapMinTimeout = 200;
        this.touchstartTime = 0;
        this.i = 0;
        this.isMousedown = false;
        this.touchListeners = {
            "touchstart": "handleTouchstart",
            "touchmove": "handleTouchmove",
            "touchend": "handleTouchend"
        };
        this.mouseListeners = {
            "mousedown": "handleMousedown",
            "mousemove": "handleMousemove",
            "mouseup": "handleMouseup",
            "wheel": "handleWheel"
        };
        this.otherListeners = {
            "resize": "handleResize"
        };
        /*
         * Listeners
         */
        /* Touchstart */
        this.handleTouchstart = function (event) {
            _this.elementPosition = _this.getElementPosition();
            _this.touchstartTime = new Date().getTime();
            if (_this.eventType === undefined) {
                _this.getTouchstartPosition(event);
            }
            _this.runHandler("touchstart", event);
        };
        /* Touchmove */
        this.handleTouchmove = function (event) {
            var touches = event.touches;
            // Pan
            if (_this.detectPan(touches)) {
                _this.runHandler("pan", event);
            }
            // Pinch
            if (_this.detectPinch(event)) {
                _this.runHandler("pinch", event);
            }
            // Linear swipe
            switch (_this.detectLinearSwipe(event)) {
                case "horizontal-swipe":
                    event.swipeType = "horizontal-swipe";
                    _this.runHandler("horizontal-swipe", event);
                    break;
                case "vertical-swipe":
                    event.swipeType = "vertical-swipe";
                    _this.runHandler("vertical-swipe", event);
                    break;
            }
            // Linear swipe
            if (_this.detectLinearSwipe(event) ||
                _this.eventType === 'horizontal-swipe' ||
                _this.eventType === 'vertical-swipe') {
                _this.handleLinearSwipe(event);
            }
        };
        /* Touchend */
        this.handleTouchend = function (event) {
            var touches = event.touches;
            // Double Tap
            if (_this.detectDoubleTap()) {
                _this.runHandler("double-tap", event);
            }
            // Tap
            _this.detectTap();
            _this.runHandler("touchend", event);
            _this.eventType = 'touchend';
            if (touches && touches.length === 0) {
                _this.eventType = undefined;
                _this.i = 0;
            }
        };
        /* Mousedown */
        this.handleMousedown = function (event) {
            _this.isMousedown = true;
            _this.elementPosition = _this.getElementPosition();
            _this.touchstartTime = new Date().getTime();
            if (_this.eventType === undefined) {
                _this.getMousedownPosition(event);
            }
            _this.runHandler("mousedown", event);
        };
        /* Mousemove */
        this.handleMousemove = function (event) {
            //event.preventDefault();
            if (!_this.isMousedown) {
                return;
            }
            // Pan
            _this.runHandler("pan", event);
            // Linear swipe
            switch (_this.detectLinearSwipe(event)) {
                case "horizontal-swipe":
                    event.swipeType = "horizontal-swipe";
                    _this.runHandler("horizontal-swipe", event);
                    break;
                case "vertical-swipe":
                    event.swipeType = "vertical-swipe";
                    _this.runHandler("vertical-swipe", event);
                    break;
            }
            // Linear swipe
            if (_this.detectLinearSwipe(event) ||
                _this.eventType === 'horizontal-swipe' ||
                _this.eventType === 'vertical-swipe') {
                _this.handleLinearSwipe(event);
            }
        };
        /* Mouseup */
        this.handleMouseup = function (event) {
            // Tap
            _this.detectTap();
            _this.isMousedown = false;
            _this.runHandler("mouseup", event);
            _this.eventType = undefined;
            _this.i = 0;
        };
        /* Wheel */
        this.handleWheel = function (event) {
            _this.runHandler("wheel", event);
        };
        /* Resize */
        this.handleResize = function (event) {
            _this.runHandler("resize", event);
        };
        this.properties = properties;
        this.element = this.properties.element;
        this.elementPosition = this.getElementPosition();
        this.toggleEventListeners('addEventListener');
    }
    Touches.prototype.destroy = function () {
        this.toggleEventListeners('removeEventListener');
    };
    Touches.prototype.toggleEventListeners = function (action) {
        var listeners;
        if (this.properties.listeners === 'mouse and touch') {
            listeners = Object.assign(this.touchListeners, this.mouseListeners);
        }
        else {
            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;
        }
        if (this.properties.resize) {
            listeners = Object.assign(listeners, this.otherListeners);
        }
        for (var listener in listeners) {
            var handler = listeners[listener];
            // Window
            if (listener === "resize") {
                if (action === 'addEventListener') {
                    window.addEventListener(listener, this[handler], false);
                }
                if (action === 'removeEventListener') {
                    window.removeEventListener(listener, this[handler], false);
                }
                // Document
            }
            else if (listener === 'mouseup' || listener === "mousemove") {
                if (action === 'addEventListener') {
                    document.addEventListener(listener, this[handler], false);
                }
                if (action === 'removeEventListener') {
                    document.removeEventListener(listener, this[handler], false);
                }
                // Element
            }
            else {
                if (action === 'addEventListener') {
                    this.element.addEventListener(listener, this[handler], false);
                }
                if (action === 'removeEventListener') {
                    this.element.removeEventListener(listener, this[handler], false);
                }
            }
        }
    };
    Touches.prototype.handleLinearSwipe = function (event) {
        //event.preventDefault();
        this.i++;
        if (this.i > 3) {
            this.eventType = this.getLinearSwipeType(event);
        }
        if (this.eventType === 'horizontal-swipe') {
            this.runHandler('horizontal-swipe', event);
        }
        if (this.eventType === 'vertical-swipe') {
            this.runHandler('vertical-swipe', event);
        }
    };
    Touches.prototype.runHandler = function (eventName, response) {
        if (this.handlers[eventName]) {
            this.handlers[eventName](response);
        }
    };
    /*
     * Detection
     */
    Touches.prototype.detectPan = function (touches) {
        return touches.length === 1 && !this.eventType || this.eventType === 'pan';
    };
    Touches.prototype.detectDoubleTap = function () {
        var _this = this;
        if (this.eventType != undefined) {
            return;
        }
        var currentTime = new Date().getTime();
        var tapLength = currentTime - this.lastTap;
        clearTimeout(this.doubleTapTimeout);
        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {
            return true;
        }
        else {
            this.doubleTapTimeout = setTimeout(function () {
                clearTimeout(_this.doubleTapTimeout);
            }, this.doubleTapMinTimeout);
        }
        this.lastTap = currentTime;
    };
    Touches.prototype.detectTap = function () {
        if (this.eventType != undefined) {
            return;
        }
        var currentTime = new Date().getTime();
        var tapLength = currentTime - this.touchstartTime;
        if (tapLength > 0) {
            if (tapLength < this.tapMinTimeout) {
                this.runHandler("tap", event);
            }
            else {
                this.runHandler("longtap", event);
            }
        }
    };
    Touches.prototype.detectPinch = function (event) {
        var touches = event.touches;
        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';
    };
    Touches.prototype.detectLinearSwipe = function (event) {
        var touches = event.touches;
        if (touches) {
            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {
                return this.getLinearSwipeType(event);
            }
        }
        else {
            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {
                return this.getLinearSwipeType(event);
            }
        }
    };
    Touches.prototype.getLinearSwipeType = function (event) {
        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {
            var movementX = Math.abs(this.moveLeft(0, event) - this.startX);
            var movementY = Math.abs(this.moveTop(0, event) - this.startY);
            if ((movementY * 3) > movementX) {
                return 'vertical-swipe';
            }
            else {
                return 'horizontal-swipe';
            }
        }
        else {
            return this.eventType;
        }
    };
    Touches.prototype.getElementPosition = function () {
        return this.element.getBoundingClientRect();
    };
    Touches.prototype.getTouchstartPosition = function (event) {
        this.startX = event.touches[0].clientX - this.elementPosition.left;
        this.startY = event.touches[0].clientY - this.elementPosition.top;
    };
    Touches.prototype.getMousedownPosition = function (event) {
        this.startX = event.clientX - this.elementPosition.left;
        this.startY = event.clientY - this.elementPosition.top;
    };
    Touches.prototype.moveLeft = function (index, event) {
        var touches = event.touches;
        if (touches) {
            return touches[index].clientX - this.elementPosition.left;
        }
        else {
            return event.clientX - this.elementPosition.left;
        }
    };
    Touches.prototype.moveTop = function (index, event) {
        var touches = event.touches;
        if (touches) {
            return touches[index].clientY - this.elementPosition.top;
        }
        else {
            return event.clientY - this.elementPosition.top;
        }
    };
    Touches.prototype.detectTouchScreen = function () {
        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');
        var mq = function (query) {
            return window.matchMedia(query).matches;
        };
        if (('ontouchstart' in window)) {
            return true;
        }
        // include the 'heartz' as a way to have a non matching MQ to help terminate the join
        // https://git.io/vznFH
        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');
        return mq(query);
    };
    /* Public properties and methods */
    Touches.prototype.on = function (event, handler) {
        if (event) {
            this.handlers[event] = handler;
        }
    };
    return Touches;
}());
export { Touches };
//# sourceMappingURL=data:application/json;base64,