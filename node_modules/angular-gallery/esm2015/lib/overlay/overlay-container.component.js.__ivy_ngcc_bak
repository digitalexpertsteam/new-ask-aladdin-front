import { __decorate } from "tslib";
import { Component, OnInit, HostBinding, HostListener, ViewChild, ElementRef, Input, ComponentFactoryResolver } from '@angular/core';
import { EventService } from './event.service';
import { AdDirective } from './ad.directive';
let OverlayContainerComponent = class OverlayContainerComponent {
    constructor(componentFactoryResolver, elementRef, eventService) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.elementRef = elementRef;
        this.eventService = eventService;
        this.overlayBackdrop = true;
        this.minTimeout = 30;
        this._hostOpacity = 0;
        this.globalEventsSubscription = this.eventService.emitter.subscribe((event) => {
            this.handleGlobalEvents(event);
        });
    }
    get hostOpacity() {
        return this.properties.fadeIn ? this._hostOpacity : 1;
    }
    set hostOpacity(value) {
        this._hostOpacity = value;
    }
    get hostTransition() {
        const duration = this.properties.animationDuration + 'ms ';
        const esing = this.properties.animationTimingFunction;
        return 'opacity ' + duration + esing + ', transform ' + duration + esing;
    }
    get hostZIndex() {
        return this.properties.zIndex;
    }
    get hostWidth() {
        return this.properties.wrapperWidth;
    }
    get hostHeight() {
        return this.properties.wrapperHeight;
    }
    get hostPosition() {
        return this.properties.position;
    }
    onClick(event) {
        if (!this.elementRef.nativeElement.contains(event.target)) {
            if (this.hostShown) {
                this.closeOverlay();
            }
        }
    }
    transitionEnd(event) {
        if (event.target.tagName.toLowerCase() != "overlay") {
            return;
        }
        if (event.propertyName != "opacity") {
            return;
        }
        if (this.hostShown) {
            this.closeOverlayEnd();
            //this.stateEvents.emit("shown");
        }
        else {
            this.hostShown = true;
            //this.stateEvents.emit("hidden");
        }
    }
    get popoverClass() {
        if (this.properties.metadata) {
            return this.properties.metadata.popoverClass;
        }
    }
    ngOnInit() {
        this.loadComponent();
        this.initialOverlay();
        setTimeout(() => {
            this.isInitial = true;
        }, this.minTimeout); // Note: not good
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this.showOverlayAnimation();
        }, this.minTimeout);
    }
    ngOnDestroy() {
        if (this.globalEventsSubscription) {
            this.globalEventsSubscription.unsubscribe();
        }
    }
    initialOverlay() {
        this.hostTransform = 'translateY(' + this.properties.animationTranslateY + ')';
    }
    showOverlayAnimation() {
        this.hostOpacity = 1;
        this.hostTransform = 'translateY(0px)';
    }
    loadComponent() {
        let adItem = this.properties;
        let componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.mainComponent);
        let viewContainerRef = this.adHost.viewContainerRef;
        viewContainerRef.clear();
        let componentRef = viewContainerRef.createComponent(componentFactory);
        let componentRefElement = componentRef.location.nativeElement;
        // Set styles
        componentRefElement.style.width = this.properties.width;
        componentRefElement.style.height = this.properties.height;
        // Set classes
        if (typeof this.popoverClass === 'string') {
            componentRefElement.classList.add(this.popoverClass);
        }
        if (typeof this.popoverClass === 'object') {
            this.popoverClass.forEach(function (className) {
                componentRefElement.classList.add(className);
            });
        }
        // Pass properties
        componentRef.instance.overlayProperties = this.properties;
    }
    closeOverlay() {
        this.hostOpacity = 0;
        this.hostTransform = 'translateY(' + this.properties.animationTranslateY + ')';
    }
    closeOverlayEnd() {
        this.hostShown = false;
        this.eventService.emitChangeEvent({
            type: '[Overlay] Hide'
        });
    }
    handleGlobalEvents(event) {
        if (event.type === 'Hide') {
            this.closeOverlay();
        }
    }
};
OverlayContainerComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ElementRef },
    { type: EventService }
];
__decorate([
    ViewChild(AdDirective, { static: true })
], OverlayContainerComponent.prototype, "adHost", void 0);
__decorate([
    Input()
], OverlayContainerComponent.prototype, "properties", void 0);
__decorate([
    HostBinding('style.opacity')
], OverlayContainerComponent.prototype, "hostOpacity", null);
__decorate([
    HostBinding('style.transition')
], OverlayContainerComponent.prototype, "hostTransition", null);
__decorate([
    HostBinding('style.transform')
], OverlayContainerComponent.prototype, "hostTransform", void 0);
__decorate([
    HostBinding('style.z-index')
], OverlayContainerComponent.prototype, "hostZIndex", null);
__decorate([
    HostBinding('style.width')
], OverlayContainerComponent.prototype, "hostWidth", null);
__decorate([
    HostBinding('style.height')
], OverlayContainerComponent.prototype, "hostHeight", null);
__decorate([
    HostBinding('style.position')
], OverlayContainerComponent.prototype, "hostPosition", null);
__decorate([
    HostBinding('class.overlay-shown')
], OverlayContainerComponent.prototype, "hostShown", void 0);
__decorate([
    HostListener('document:click', ['$event'])
], OverlayContainerComponent.prototype, "onClick", null);
__decorate([
    HostListener('transitionend', ['$event'])
], OverlayContainerComponent.prototype, "transitionEnd", null);
OverlayContainerComponent = __decorate([
    Component({
        selector: 'overlay',
        template: "<!--\n<div class=\"overlay-backdrop\" \n\t*ngIf=\"properties.overlayBackdrop\" \n\t(click)=\"onBackdropClick()\" \n\t[ngClass]=\"properties.backdropClass\"></div>\n-->\n<!--\n<div class=\"overlay-container\"\n\t[ngStyle]=\"containerStyles\" \n\t[ngClass]=\"properties.overlayClass\">\n\n\t<ng-template ad-host></ng-template>\n</div>\n-->\n\n<ng-template ad-host></ng-template>",
        styles: [":host{position:absolute;top:0;left:0}:host .overlay-backdrop{position:fixed;top:0;left:0;right:0;bottom:0;background-color:#000;opacity:0;z-index:1000;pointer-events:auto}"]
    })
], OverlayContainerComponent);
export { OverlayContainerComponent };
//# sourceMappingURL=data:application/json;base64,